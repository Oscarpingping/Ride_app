

一、项目说明
这个项目是要开发一款可以在iOS和Andriod上兼容运行的app，实现riding活动社交管理:
1,管理活动创建、活动发帖、俱乐部展示，用户间即时消息和群聊;
至少包括如下模块：
a，主页面home展示已公开发布的户外活动招募，基于活动的发帖及互动；
b，注册成员可以在creat页面创建活动，分为公开活动或私密活动，公开活动对所有人可见，私密活动只有创建者指定的成员可以看到；
c，message页面里支持注册用户之间私聊和聊天室群聊，聊天室由俱乐部创建者创建俱乐部专属的聊天室，或活动者建立活动时建某个活动的聊天室等；
d，将saved页面改为club页面，展示数据库里各俱乐部，包括简介、创始人，管理员，成员数量、组织的活动数量等，打开俱乐部可展示最近发起的活动，
用户在此可以申请加入俱乐部；
e，profile页面内展示个人发起的活动和参与的活动，支持用户profile管理（）；同时页面里展示“我的活动”，“我的联系人”，“我的俱乐部”三个子页面。
在“我的联系人”里面按照用户name字母顺序排列已添加的联系人，并可新增联系人；在“我的俱乐部”里展示该用户已创建、管理和加入的俱乐部（创建人和管理人可以是同一人），
用户可以在这里创建俱乐部（以后这个权限需要根据用户的级别授予）；
f，在个人页面“设置”上方增加
g，主界面home左边的图标打开message页面，列出用户最近（按时间先后顺序）聊过的联系人和聊天室。
打开其中的某个聊天，聊天页面从后端数据库调取最近的聊天记录。
h，在创建私有活动时，活动创建者可以邀请他人参加，并选择新建聊天群，被邀请人进入聊天室，或利用现有自己管理的俱乐部聊天室。




项目结构：
项目设计采用前后端分离设计，前端app采用React Native + Expo；后端采用Node.js+Express+mongoDB。

项目结构如下：

```
├── app/                    # 主要应用代码
│   ├── components/        # 可复用组件
│   ├── context/          # Context相关
│   ├── hooks/            # 自定义Hooks
│   ├── services/         # API服务
│   ├── types/            # TypeScript类型定义
│   ├── constants/        # 常量定义
│   └── (tabs)/           # 标签页相关组件
├── backend/              # 后端服务代码
├── shared/              # 前后端共享代码
├── assets/              # 静态资源
└── scripts/             # 工具脚本

其中，shared 目录的设计体现了现代前端工程化的最佳实践，是一个很好的参考示例。

1，类型定义
使用 TypeScript 接口和类型
清晰的类型层次结构
类型复用和组合
2，API 设计
RESTful 风格
统一的端点管理
类型安全的请求/响应
3，工具函数
纯函数设计
单一职责
可测试性
4，配置管理
环境变量管理
类型安全的配置
开发/生产环境分离

设置share的目录这种设计方式确保了：
代码的可维护性
类型安全
前后端一致性
开发效率
代码复用

三、项目使用的技术栈
前端技术栈：
核心框架：
React Native (0.76.9)
Expo (52.0.46)
TypeScript


UI组件：
React Native Paper (Material Design组件库)
Expo Vector Icons
React Native Maps (地图功能)
React Native Reanimated (动画)
功能模块：
Expo Location (位置服务)
React Native Gesture Handler (手势处理)
AsyncStorage (本地存储)
Google Sign-In (Google登录)
后端技术栈：
服务器：
Express.js
MongoDB (mongoose)
JWT (身份验证)
Firebase (可能用于实时功能)